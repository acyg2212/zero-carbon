[{"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/index.js":"1","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/App.js":"2","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/SplashPage.js":"3","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/TravelCalculator.js":"4","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/RestaurantRanker.js":"5","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/data/Options.js":"6"},{"size":219,"mtime":1607206586006,"results":"7","hashOfConfig":"8"},{"size":178,"mtime":1607442887982,"results":"9","hashOfConfig":"8"},{"size":2431,"mtime":1607460047662,"results":"10","hashOfConfig":"8"},{"size":9687,"mtime":1607460067959,"results":"11","hashOfConfig":"8"},{"size":2663,"mtime":1607460067959,"results":"12","hashOfConfig":"8"},{"size":260,"mtime":1607460067960,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"39u80e",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/index.js",[],["28","29"],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/App.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/SplashPage.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/TravelCalculator.js",["30","31","32"],"import React, { useEffect, useState } from 'react';\nconst dotenv = require(\"dotenv\");\nconst env = dotenv.config()\n\nconst TravelCalculator = () => {\n    const [longitude, setLongitude] = useState('');\n    const [latitude, setLatitude] = useState('');\n    const [searchValue, setSearchValue] = useState('');\n    const [distance, setDistance] = useState(null);\n    const [footprint, setFoorprint] = useState('')\n    const [efficiency, setEfficiency] = useState('')\n    const [fuel, setFuel] = useState('petrol')\n    const [emission, setEmission] = useState(2.3)\n    const [year, setYear] = useState(2006);\n    const [make, setMake] = useState(\"Audi\");\n    const [models, setModels] = useState(null);\n\n    useEffect(() => {\n        async function getModel() {\n            const response = await fetch(`https://www.fueleconomy.gov/ws/rest/vehicle/menu/model?year=${year}&make=${make}`)\n            const responseData = await response.text()\n            if (!response.ok) {\n                console.error(response)\n            } else {\n                let data = new window.DOMParser().parseFromString(responseData, \"text/xml\")\n                let first = data.getElementsByTagName(\"menuItems\")[0].childNodes\n                let newArray = Array.prototype.map.call(first, (function (node) {\n                    return node\n                }))\n                // setModels(first)\n                console.log(newArray[0].childNodes[0].innerHTML)\n            }\n        }\n        getModel();\n    })\n\n    const successfulLookup = position => {\n        const { latitude, longitude } = position.coords;\n        setLatitude(latitude);\n        setLongitude(longitude);\n    }\n\n    const failureCallBack = error => {\n        console.log(error)\n    }\n\n    if (window.navigator.geolocation) {\n        window.navigator.geolocation\n            .getCurrentPosition(successfulLookup, failureCallBack);\n\n    }\n\n    const searchBarFunction = (e) => {\n        e.preventDefault();\n        let searchURI = encodeURIComponent(searchValue)\n\n        async function searchIt() {\n\n            const response = await fetch(`http://dev.virtualearth.net/REST/v1/Locations?query=${searchURI}&key=${process.env.REACT_APP_API_KEY}`)\n            const responseData = await response.json();\n            if (!response.ok) {\n                console.error(\"ERROR\")\n            } else {\n                // let data = responseData.response\n                let info = responseData.resourceSets[0]\n                let detailedInfo = info.resources;\n                let coordinates = detailedInfo[0].point.coordinates\n\n\n                const res = await fetch(`https://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix?origins=${latitude},${longitude}&destinations=${coordinates[0]},${coordinates[1]}&travelMode=driving&key=${process.env.REACT_APP_API_KEY}`)\n                if (!res.ok) {\n                    console.error(\"ERROR\")\n                } else {\n                    const resData = await res.json();\n                    let info = resData.resourceSets[0]\n                    let distance = info.resources[0].results[0].travelDistance;\n                    setDistance(distance);\n                }\n\n\n            }\n        }\n        searchIt();\n    }\n\n\n    const getFuel = e => {\n        setFuel(e.target.value)\n        switch (e.target.value) {\n            case 'petrol':\n                setEmission(2.3);\n                break;\n            case 'diesel':\n                setEmission(2.6);\n                break;\n            case 'lpg':\n                setEmission(1.6);\n                break;\n            case 'cpg':\n                setEmission(2.2);\n                break;\n            default:\n                setEmission(2.3)\n        }\n    }\n    const measurement = e => {\n        console.log('hi')\n    }\n\n    const getEfficiency = e => {\n        setEfficiency(e.target.value)\n    }\n\n    const getDistance = e => {\n        setDistance(e.target.value)\n    }\n\n    const calculate_footprint = e => {\n        const carbon = (parseInt(distance) / parseInt(efficiency) * emission)\n        setFoorprint(carbon.toFixed(2))\n    }\n    console.log(year);\n    return (\n        <div>\n            <form onSubmit={searchBarFunction}>\n                <input type='text' placeholder=\"destination\" onChange={(e) => setSearchValue(e.target.value)} />\n                <button type=\"submit\">Search</button>\n            </form>\n\n            <div className='calculator'>\n                <form>\n                    <div className='field'>\n                        <label for='distance'>Trip Distance </label>\n                        <input name='distance' id='distance' type='number' value={distance} onChange={getDistance} />\n                    </div>\n                    {/* <div className='field'>\n                        <label for='vehicle'>Vehicle Type </label>\n                        <select id='vehicle' name='vehicle'>\n                            <option>Car type 1</option>\n                            <option>Car type 2</option>\n                            <option>Car type 3</option>\n                        </select>\n                    </div> */}\n                    <div className='field multi-field'>\n                        <label for='efficiency'>Efficiency</label>\n                        <input name='efficiency' type='number' onChange={getEfficiency} value={efficiency} />\n                        <select name='efficiency' onChange={measurement}>\n                            <option value='mgallon'>m/gallon</option>\n                            <option value='lkm'>L/100km</option>\n                        </select>\n                        <select name='efficiency' id='fuel-type' onChange={getFuel} value={fuel} >\n                            <option value='petrol'>Petrol</option>\n                            <option value='diesel'>Diesel</option>\n                            <option value='lpg'>LPG</option>\n                            <option value='cpg'>CPG</option>\n                        </select>\n                    </div>\n                    <span>Or Search Vehicle Efficiency</span>\n                    <div className='field multi-field'>\n                        <label for='year'>Year </label>\n                        <select name='year' id='name' onChange={e => setYear(e.target.value)}>\n                            <option>2006</option>\n                            <option>2007</option>\n                            <option>2008</option>\n                            <option>2009</option>\n                            <option>2010</option>\n                            <option>2011</option>\n                            <option>2012</option>\n                            <option>2013</option>\n                            <option>2014</option>\n                            <option>2015</option>\n                            <option>2016</option>\n                            <option>2017</option>\n                            <option>2018</option>\n                            <option>2019</option>\n                            <option>2020</option>\n                        </select>\n                        <label for='make'>Make </label>\n                        <select name='make' id='make' onChange={e => setMake(e.target.value)}>\n                            <option>Audi</option>\n                            <option>Acura</option>\n                            <option>Aston Martin</option>\n                            <option>Bentley</option>\n                            <option>BMW</option>\n                            <option>Buick</option>\n                            <option>Cadillac</option>\n                            <option>Chevrolet</option>\n                            <option>Chrysler</option>\n                            <option>Dodge</option>\n                            <option>Ferrari</option>\n                            <option>Ford</option>\n                            <option>GMC</option>\n                            <option>Honda</option>\n                            <option>Hyundai</option>\n                            <option>Infiniti</option>\n                            <option>Isuzu</option>\n                            <option>Jaguar</option>\n                            <option>Jeep</option>\n                            <option>Kia</option>\n                            <option>Lamborghini</option>\n                            <option>Land Rover</option>\n                            <option>Lexus</option>\n                            <option>Lincoln</option>\n                            <option>Lotus</option>\n                            <option>Maserati</option>\n                            <option>Mazda</option>\n                            <option>Mecedes-Benz</option>\n                        </select>\n                        <label for='model'>Model </label>\n                        <select name='model' id='model' >\n                            {/* {models ? Array.prototype.map.call(model.childNodes, (function(node){\n                                <option>{model}</option>\n                            }) : \"\"} */}\n                            <option>Model 1</option>\n                            <option>Model 2</option>\n                            <option>Model 3</option>\n                        </select>\n                    </div>\n                </form>\n                <button onClick={calculate_footprint}>Calculate Footprint</button>\n                <div>\n                    <h3>Your Carbon footprint </h3>\n                    <input name='footprint' value={footprint} />\n                    <label> Litres per Km</label>\n                </div>\n                <div>{distance}</div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default TravelCalculator;\n","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/RestaurantRanker.js",["33"],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/data/Options.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":3,"column":7,"nodeType":"40","messageId":"41","endLine":3,"endColumn":10},{"ruleId":"38","severity":1,"message":"42","line":16,"column":12,"nodeType":"40","messageId":"41","endLine":16,"endColumn":18},{"ruleId":"38","severity":1,"message":"43","line":16,"column":20,"nodeType":"40","messageId":"41","endLine":16,"endColumn":29},{"ruleId":"44","severity":1,"message":"45","line":54,"column":32,"nodeType":"46","messageId":"47","endLine":54,"endColumn":34},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'env' is assigned a value but never used.","Identifier","unusedVar","'models' is assigned a value but never used.","'setModels' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]