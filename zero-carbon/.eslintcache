[{"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/index.js":"1","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/App.js":"2","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/SplashPage.js":"3","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/TravelCalculator.js":"4","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/RestaurantRanker.js":"5","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/data/Options.js":"6","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Carousel.js":"7","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Card.js":"8","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/data/Suggestions.js":"9","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/ContactUs.js":"10","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/LearnMore.js":"11"},{"size":219,"mtime":1607206586006,"results":"12","hashOfConfig":"13"},{"size":521,"mtime":1607609527726,"results":"14","hashOfConfig":"13"},{"size":3158,"mtime":1607614234016,"results":"15","hashOfConfig":"13"},{"size":13170,"mtime":1607616994499,"results":"16","hashOfConfig":"13"},{"size":4359,"mtime":1607615084347,"results":"17","hashOfConfig":"13"},{"size":1038,"mtime":1607462999201,"results":"18","hashOfConfig":"13"},{"size":554,"mtime":1607606873165,"results":"19","hashOfConfig":"13"},{"size":567,"mtime":1607610201292,"results":"20","hashOfConfig":"13"},{"size":1434,"mtime":1607606873166,"results":"21","hashOfConfig":"13"},{"size":1162,"mtime":1607610005763,"results":"22","hashOfConfig":"13"},{"size":670,"mtime":1607610034303,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"39u80e",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/index.js",[],["49","50"],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/App.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/SplashPage.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/TravelCalculator.js",["51","52","53","54","55"],"import React, { useEffect, useState } from 'react';\nimport NewCarousel from '../Carousel';\nconst dotenv = require(\"dotenv\");\nconst env = dotenv.config()\n\nconst TravelCalculator = (props) => {\n    const [longitude, setLongitude] = useState('');\n    const [latitude, setLatitude] = useState('');\n    const [searchValue, setSearchValue] = useState('');\n    const [distance, setDistance] = useState(null);\n    const [footprint, setFoorprint] = useState('')\n    const [efficiency, setEfficiency] = useState('')\n    const [fuel, setFuel] = useState('petrol')\n    const [emission, setEmission] = useState(2.3)\n    const [year, setYear] = useState(2006);\n    const [make, setMake] = useState(\"Audi\");\n    const [models, setModels] = useState([]);\n    const [model, setModel] = useState(null)\n\n    useEffect(() => {\n        async function getModel() {\n            const response = await fetch(`https://www.fueleconomy.gov/ws/rest/vehicle/menu/model?year=${year}&make=${make}`)\n            const responseData = await response.text()\n            if (!response.ok) {\n                console.error(response)\n            } else {\n                let data = new window.DOMParser().parseFromString(responseData, \"text/xml\")\n                let first = data.getElementsByTagName(\"menuItems\")[0].childNodes\n                let newArray = Array.prototype.map.call(first, (function (node) {\n                    return node\n                }))\n                let models = newArray.map(node => {\n                    return node.childNodes[0].innerHTML\n                })\n                setModels(models)\n\n            }\n        }\n        getModel();\n    }, [make])\n\n    useEffect(() => {\n        if (model) {\n            async function getModel() {\n                const response = await fetch(`https://www.fueleconomy.gov/ws/rest/ympg/shared/vehicles?make=${make}&model=${model}`)\n                const responseData = await response.text()\n                if (!response.ok) {\n                    console.error(response)\n                } else {\n                    let data = new window.DOMParser().parseFromString(responseData, \"text/xml\")\n                    try {\n                        let first = data.getElementsByTagName(\"vehicles\")[0].childNodes[0].childNodes[42].innerHTML\n                        setEfficiency(first)\n                    } catch (e) {\n                        console.error(e)\n                    }\n\n                    // let newArray = Array.prototype.map.call(first, (function (node) {\n                    //     return node\n                    // }))\n                    // console.log(newArray)\n                    // let models = newArray.map(node => {\n                    //     return node.childNodes[0].innerHTML\n                    // })\n                    // setModels(models)\n                    // console.log(newArray[0].childNodes[0].innerHTML)\n                }\n\n            }\n            getModel();\n        }\n    }, [model])\n\n    const successfulLookup = position => {\n        const { latitude, longitude } = position.coords;\n        setLatitude(latitude);\n        setLongitude(longitude);\n    }\n\n    const failureCallBack = error => {\n        console.log(error)\n    }\n\n    if (window.navigator.geolocation) {\n        window.navigator.geolocation\n            .getCurrentPosition(successfulLookup, failureCallBack);\n\n    }\n\n    const searchBarFunction = (e) => {\n        e.preventDefault();\n        let searchURI = encodeURIComponent(searchValue)\n\n        async function searchIt() {\n\n            const response = await fetch(`https://dev.virtualearth.net/REST/v1/Locations?query=${searchURI}&key=${process.env.REACT_APP_API_KEY}`)\n            const responseData = await response.json();\n            if (!response.ok) {\n                console.error(\"ERROR\")\n            } else {\n                // let data = responseData.response\n                let info = responseData.resourceSets[0]\n                let detailedInfo = info.resources;\n                let coordinates = detailedInfo[0].point.coordinates\n\n\n                const res = await fetch(`https://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix?origins=${latitude},${longitude}&destinations=${coordinates[0]},${coordinates[1]}&travelMode=driving&key=${process.env.REACT_APP_API_KEY}`)\n                if (!res.ok) {\n                    console.error(\"ERROR\")\n                } else {\n                    const resData = await res.json();\n                    let info = resData.resourceSets[0]\n                    let distance = info.resources[0].results[0].travelDistance;\n                    setDistance(distance);\n                }\n\n\n            }\n        }\n        searchIt();\n    }\n\n\n    const getFuel = e => {\n        setFuel(e.target.value)\n        switch (e.target.value) {\n            case 'petrol':\n                setEmission(2.3);\n                break;\n            case 'diesel':\n                setEmission(2.6);\n                break;\n            case 'lpg':\n                setEmission(1.6);\n                break;\n            case 'cpg':\n                setEmission(2.2);\n                break;\n            default:\n                setEmission(2.3)\n        }\n    }\n    const measurement = e => {\n        console.log('hi')\n    }\n\n    const getEfficiency = e => {\n        setEfficiency(e.target.value)\n    }\n\n    const getDistance = e => {\n        setDistance(e.target.value)\n    }\n\n    const calculate_footprint = e => {\n        e.preventDefault()\n        const carbon = (parseInt(distance) / parseInt(efficiency) * emission)\n        setFoorprint(carbon.toFixed(2))\n        const carousel = document.getElementsByClassName('hide')[0];\n        carousel.classList.remove(\"hide\")\n        carousel.classList.add(\"show\")\n    }\n    return (\n        <div className=\"travel-container\">\n            <button id=\"close-button\" onClick={props.handleClose}>X</button>\n            <h1>Carbon Travel Calculator</h1>\n            {/* <div className=\"step-1-div\">\n                <div>\n                    <h3 className=\"travel-steps\">Step 1</h3>\n                    <p className=\"travel-calculator-instructions\">(enter travel distance)</p>\n                </div> */}\n            {/* <form onSubmit={searchBarFunction}>\n                    <div className=\"search-bar-div\">\n                        <input type='text' name=\"search\" className=\"search-input\" placeholder=\"🔍 Destination\" onChange={(e) => setSearchValue(e.target.value)} />\n                        <button className=\"form-button\" type=\"submit\">Search</button>\n                    </div>\n                </form> */}\n            {/* </div> */}\n\n            {/* <div className='calculator'> */}\n\n            <div >\n                <form>\n                    <div className=\"step-1-div\">\n                        <div className=\"step-div\">\n                            <h3 className=\"travel-steps\">Step 1</h3>\n                            <p className=\"travel-calculator-instructions\">(enter travel distance)</p>\n                        </div>\n                        <div className='field'>\n                            <label for='distance'>Trip Distance </label>\n                            <input name='distance' id='distance' type='number' value={distance} onChange={getDistance} />\n                         Miles\n                        </div>\n                    </div>\n                    <div className=\"step-2-div\">\n                        <div className=\"step-div\">\n                            <h3 className=\"travel-steps\">Step 2</h3>\n                            <p className=\"travel-calculator-instructions\">(enter fuel efficiency or search for your car)</p>\n                        </div>\n\n                        <div className='field'>\n                            <div className='field multi-field'>\n                                <label for='efficiency'>Efficiency</label>\n                                <input name='efficiency' type='number' onChange={getEfficiency} value={efficiency} />\n                                <select name='efficiency' onChange={measurement}>\n                                    <option value='mgallon'>m/gallon</option>\n                                </select>\n                                <select name='efficiency' id='fuel-type' onChange={getFuel} value={fuel} >\n                                    <option value='petrol'>Petrol</option>\n                                    <option value='diesel'>Diesel</option>\n                                    <option value='lpg'>LPG</option>\n                                    <option value='cpg'>CPG</option>\n                                </select>\n                            </div>\n                            <span className=\"travel-calculator-span\">Or Search Vehicle Efficiency:</span>\n                            <div className='field multi-field three-field'>\n                                <label for='year'>Year </label>\n                                <select name='year' id='name' onChange={e => setYear(e.target.value)}>\n                                    <option>2006</option>\n                                    <option>2007</option>\n                                    <option>2008</option>\n                                    <option>2009</option>\n                                    <option>2010</option>\n                                    <option>2011</option>\n                                    <option>2012</option>\n                                    <option>2013</option>\n                                    <option>2014</option>\n                                    <option>2015</option>\n                                    <option>2016</option>\n                                    <option>2017</option>\n                                    <option>2018</option>\n                                    <option>2019</option>\n                                    <option>2020</option>\n                                </select>\n                                <label for='make'>Make </label>\n                                <select name='make' id='make' onChange={e => setMake(e.target.value)}>\n                                    <option>Audi</option>\n                                    <option>Acura</option>\n                                    <option>Aston Martin</option>\n                                    <option>Bentley</option>\n                                    <option>BMW</option>\n                                    <option>Buick</option>\n                                    <option>Cadillac</option>\n                                    <option>Chevrolet</option>\n                                    <option>Chrysler</option>\n                                    <option>Dodge</option>\n                                    <option>Ferrari</option>\n                                    <option>Ford</option>\n                                    <option>GMC</option>\n                                    <option>Honda</option>\n                                    <option>Hyundai</option>\n                                    <option>Infiniti</option>\n                                    <option>Isuzu</option>\n                                    <option>Jaguar</option>\n                                    <option>Jeep</option>\n                                    <option>Kia</option>\n                                    <option>Lamborghini</option>\n                                    <option>Land Rover</option>\n                                    <option>Lexus</option>\n                                    <option>Lincoln</option>\n                                    <option>Lotus</option>\n                                    <option>Maserati</option>\n                                    <option>Mazda</option>\n                                    <option>Mercedes-Benz</option>\n                                </select>\n                                <label for='model'>Model </label>\n                                <select name='model' id='model' onChange={e => setModel(e.target.value)}>\n                                    {models.length > 0 ? models.map(model => {\n                                        return <option>{model}</option>\n                                    }) : \"\"}\n                                </select>\n                            </div>\n\n                        </div>\n                    </div>\n                    <button className=\"form-button\" onClick={calculate_footprint}>Calculate Footprint</button>\n                </form>\n\n                <div className=\"step-3-div\">\n                    <h3 className=\"travel-steps\">Step 3</h3>\n                    <div className=\"carbon-results\">\n                        <h3>Your Carbon footprint </h3>\n                        <input name='footprint' value={footprint} />\n                        <label> Litres per Km</label>\n                    </div>\n                </div>\n            </div>\n            <div className=\"carousel-div hide\">\n                <h2 style={{ textAlign: \"center\" }}>Offset your carbon footprint with these suggestions</h2>\n                <NewCarousel />\n            </div>\n            {/* <div>{distance}</div> */}\n\n            {/* </div> */}\n        </div >\n    )\n}\n\nexport default TravelCalculator;\n","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Modals/RestaurantRanker.js",["56"],"import React, { useState, useEffect } from 'react';\nimport NewCarousel from '../Carousel';\nimport { options } from '../data/Options'\n\n\n\nconst RestaurantRanker = (props) => {\n    const [count, setCount] = useState(2)\n    const [sorted, setSorted] = useState([])\n    const [newOptions, setNewOptions] = useState(options)\n    const [footprint, setFootprint] = useState(0)\n\n\n    const addItem = e => {\n\n        e.preventDefault()\n        const addSelect = document.createElement('select');\n        addSelect.id = `item${count}`\n        addSelect.name = `item${count}`\n        addSelect.className = 'selection'\n        addSelect.onchange = function () { editOptions() }\n        const select = document.getElementsByClassName('addSelect')[0]\n        const defaultOption = document.createElement('option')\n        defaultOption.innerHTML = 'Add Item'\n        addSelect.appendChild(defaultOption)\n        select.appendChild(addSelect)\n\n        newOptions.forEach(option => {\n            const addOption = document.createElement(\"option\")\n            addOption.value = option.name\n            addOption.innerHTML = option.name\n            addSelect.appendChild(addOption)\n        })\n        setCount(count + 1)\n    }\n\n    useEffect(() => {\n        setSorted(options.sort(function (a, b) {\n            return a.value - b.value\n        }))\n\n    }, [])\n\n    const editOptions = e => {\n        const list = document.querySelectorAll('.selection')\n        let selected = []\n        list.forEach((item) => {\n            selected = [...selected, item.value]\n        })\n\n        const temp = []\n        options.forEach(item => {\n            if (!selected.includes(item.name)) {\n                temp.push(item)\n            }\n        })\n        setNewOptions(temp)\n\n        let total = 0\n        selected.forEach(item => {\n\n            options.forEach((option) => {\n                if (option.name == item) {\n                    total += option.value\n                }\n            })\n\n        })\n        setFootprint(total)\n    }\n\n    return (\n        <div className=\"food-container\">\n            <button id=\"close-button\" onClick={props.handleClose}>X</button>\n            <h3>What's in your meal? </h3>\n            <div className=\"best-worst-div\">\n                <div className=\"ranker-div\">\n                    <h4>Top 3 Foods (Best Greenhouse Gas Emissions per kg of food)</h4>\n                    {sorted.length > 0 ?\n                        <ol>\n                            <li>{sorted[0].name} {sorted[0].value}</li>\n                            <li>{sorted[1].name} {sorted[1].value}</li>\n                            <li>{sorted[2].name} {sorted[2].value}</li>\n                        </ol> :\n                        ''}\n\n                </div>\n                <div className=\"ranker-div\">\n                    <h4>Top 3 Foods (Worst Greenhouse Gas Emissions per kg of food)</h4>\n                    {sorted.length > 0 ?\n                        <ol>\n                            <li>{sorted[sorted.length - 1].name} {sorted[sorted.length - 1].value}</li>\n                            <li>{sorted[sorted.length - 2].name} {sorted[sorted.length - 2].value}</li>\n                            <li>{sorted[sorted.length - 3].name} {sorted[sorted.length - 3].value}</li>\n                        </ol> : \"\"}\n                </div>\n            </div>\n            <div className=\"add-item-div\">\n                {/* <label for='item1'>Item 1</label> */}\n                <div className='addSelect'>\n                    <select onChange={editOptions} className='selection' name='item1' id='item1'>\n                        <option>Add item</option>\n                        {options.map((option, idx) => (\n                            <option key={idx}>{option.name}</option>\n                        ))}\n                    </select>\n                </div>\n                <button className=\"add-button\" onClick={addItem}><h3>+</h3></button>\n            </div>\n            <div>\n                <h3>Carbon Footprint for this meal </h3>\n                <input for='emission' value={footprint} />\n                <label name='emission'>CO2</label>\n            </div>\n            <h2>Offset your carbon footprint with these suggestions</h2>\n            <div className=\"carousel-div\">\n                <NewCarousel />\n            </div>\n        </div>\n    )\n}\n\nexport default RestaurantRanker;\n","/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/data/Options.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Carousel.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/Card.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/data/Suggestions.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/ContactUs.js",[],"/Users/aaroncygnarowicz/Desktop/coding/zero-carbon/zero-carbon/src/components/LearnMore.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":4,"column":7,"nodeType":"63","messageId":"64","endLine":4,"endColumn":10},{"ruleId":"61","severity":1,"message":"65","line":9,"column":25,"nodeType":"63","messageId":"64","endLine":9,"endColumn":39},{"ruleId":"66","severity":1,"message":"67","line":40,"column":8,"nodeType":"68","endLine":40,"endColumn":14,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":72,"column":8,"nodeType":"68","endLine":72,"endColumn":15,"suggestions":"71"},{"ruleId":"61","severity":1,"message":"72","line":90,"column":11,"nodeType":"63","messageId":"64","endLine":90,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":63,"column":33,"nodeType":"75","messageId":"76","endLine":63,"endColumn":35},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'env' is assigned a value but never used.","Identifier","unusedVar","'setSearchValue' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'year'. Either include it or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has a missing dependency: 'make'. Either include it or remove the dependency array.",["80"],"'searchBarFunction' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [make, year]",{"range":"85","text":"86"},"Update the dependencies array to be: [make, model]",{"range":"87","text":"88"},[1636,1642],"[make, year]",[2941,2948],"[make, model]"]